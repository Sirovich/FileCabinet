<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="availableMessage" xml:space="preserve">
    <value>Available commands:</value>
  </data>
  <data name="badCsvFile" xml:space="preserve">
    <value>There is an error in csv file</value>
  </data>
  <data name="customRule" xml:space="preserve">
    <value>Using custom validation rules.</value>
  </data>
  <data name="dateOfBirthException" xml:space="preserve">
    <value>Not valid date of birth</value>
  </data>
  <data name="dateOfBirthInputMessage" xml:space="preserve">
    <value>Date of birth: </value>
  </data>
  <data name="defaultRule" xml:space="preserve">
    <value>Using default validation rules.</value>
  </data>
  <data name="deleteTime" xml:space="preserve">
    <value>Delete method execution duration is {0}.</value>
  </data>
  <data name="developerNameMessage" xml:space="preserve">
    <value>File Cabinet Application, developed by {0}</value>
  </data>
  <data name="editLog" xml:space="preserve">
    <value>{0} - Calling Edit() with Id = '{1}', FirstName = '{2}', LastName = '{3}', DateOfBirth = '{4}', Sex = '{5}', Weight = '{6}', Height = '{7}'</value>
  </data>
  <data name="editResultLog" xml:space="preserve">
    <value>{0} - Edit() completed</value>
  </data>
  <data name="exitMessage" xml:space="preserve">
    <value>Exiting an application...</value>
  </data>
  <data name="exportArgumentsException" xml:space="preserve">
    <value>Invalid parameters</value>
  </data>
  <data name="exportFileComplete" xml:space="preserve">
    <value>All records are exported to file {0}</value>
  </data>
  <data name="exportFormat" xml:space="preserve">
    <value>Use export *type of result file* *file name*</value>
  </data>
  <data name="exportUnknownArgument" xml:space="preserve">
    <value>Unknow argument {0}</value>
  </data>
  <data name="exportUnknownFormat" xml:space="preserve">
    <value>Unknown file format {0}</value>
  </data>
  <data name="fileExistMessage" xml:space="preserve">
    <value>File is exist - rewrite {0}? [Y/n]</value>
  </data>
  <data name="fileHeader" xml:space="preserve">
    <value>Id,First Name,Last Name,Date of Birth,Sex,Weight,Height</value>
  </data>
  <data name="fileNew" xml:space="preserve">
    <value>Create new file? (Y/N)</value>
  </data>
  <data name="fileNotFound" xml:space="preserve">
    <value>File doesn't exists</value>
  </data>
  <data name="fileStorage" xml:space="preserve">
    <value>Using file storage</value>
  </data>
  <data name="findDateLog" xml:space="preserve">
    <value>{0} - Calling FindDate() with DateOfBirth = '{1}'</value>
  </data>
  <data name="findDateResultLog" xml:space="preserve">
    <value>{0} - FindDate() completed</value>
  </data>
  <data name="findDateTime" xml:space="preserve">
    <value>FindDateOfBirth method execution duration is {0}.</value>
  </data>
  <data name="findFirstNameLog" xml:space="preserve">
    <value>{0} - Calling FindFirstName() with FirstName = '{1}'</value>
  </data>
  <data name="findFirstNameResultLog" xml:space="preserve">
    <value>{0} - FindFirstName() completed</value>
  </data>
  <data name="findFirstNameTime" xml:space="preserve">
    <value>FindFirstName method execution duration is {0}.</value>
  </data>
  <data name="findLastNameLog" xml:space="preserve">
    <value>{0} - Calling FindLastName() with LastName = '{1}'</value>
  </data>
  <data name="findLastNameResultLog" xml:space="preserve">
    <value>{0} - FindLastName() completed</value>
  </data>
  <data name="findLastNameTime" xml:space="preserve">
    <value>FindLastName method execution duration is {0}.</value>
  </data>
  <data name="firstNameException" xml:space="preserve">
    <value>Not valid first name</value>
  </data>
  <data name="firstNameInputMessage" xml:space="preserve">
    <value>First name: </value>
  </data>
  <data name="getRecordsLog" xml:space="preserve">
    <value>{0} - Calling GetRecords()</value>
  </data>
  <data name="getRecordsResultLog" xml:space="preserve">
    <value>{0} - GetRecords() completed</value>
  </data>
  <data name="getRecordsTime" xml:space="preserve">
    <value>GetRecords method execution duration is {0}.</value>
  </data>
  <data name="getStatLog" xml:space="preserve">
    <value>{0} - Calling GetStat()</value>
  </data>
  <data name="getStatResultLog" xml:space="preserve">
    <value>{0} - GetStat() completed</value>
  </data>
  <data name="getStatTime" xml:space="preserve">
    <value>GetStat method execution duration is {0}.</value>
  </data>
  <data name="heightException" xml:space="preserve">
    <value>Not valid height</value>
  </data>
  <data name="heightInputMessage" xml:space="preserve">
    <value>Height: </value>
  </data>
  <data name="hintMessage" xml:space="preserve">
    <value>Enter your command, or enter 'help' to get help.</value>
  </data>
  <data name="idChange" xml:space="preserve">
    <value>Cannot change id</value>
  </data>
  <data name="idException" xml:space="preserve">
    <value>Not valid id</value>
  </data>
  <data name="importException" xml:space="preserve">
    <value>Invalid parameters</value>
  </data>
  <data name="importFailed" xml:space="preserve">
    <value>Cannot import from this file</value>
  </data>
  <data name="importFailValidation" xml:space="preserve">
    <value>#{0}: {1}</value>
  </data>
  <data name="importFileComplete" xml:space="preserve">
    <value>{0} records were imported from {1}</value>
  </data>
  <data name="importFormat" xml:space="preserve">
    <value>Use import *type of import file* *file name*</value>
  </data>
  <data name="importUnknownArgument" xml:space="preserve">
    <value>Unknow argument {0}</value>
  </data>
  <data name="importUnknownFormat" xml:space="preserve">
    <value>Unknown file format {0}</value>
  </data>
  <data name="insertFailedResultLog" xml:space="preserve">
    <value>{0} - Insert() failed</value>
  </data>
  <data name="insertFormat" xml:space="preserve">
    <value>Use "insert (id, firstname, ...) values (1, 2, ...)"</value>
  </data>
  <data name="insertLog" xml:space="preserve">
    <value>{0} - Calling Insert() with FirstName = '{1}', LastName = '{2}', DateOfBirth = '{3}', Sex = '{4}', Weight = '{5}', Height = '{6}'</value>
  </data>
  <data name="insertResultLog" xml:space="preserve">
    <value>{0} - Insert() completed</value>
  </data>
  <data name="insertTime" xml:space="preserve">
    <value>Insert method execution duration is {0}.</value>
  </data>
  <data name="invalidArgument" xml:space="preserve">
    <value>Invalid argument.</value>
  </data>
  <data name="invalidInputMessage" xml:space="preserve">
    <value>Invalid input: {0}.</value>
  </data>
  <data name="invalidInsertInput" xml:space="preserve">
    <value>Invalid input format</value>
  </data>
  <data name="invalidJsonData" xml:space="preserve">
    <value>Invalid configuration data</value>
  </data>
  <data name="invalidRule" xml:space="preserve">
    <value>Not valid rule</value>
  </data>
  <data name="invalidStorage" xml:space="preserve">
    <value>Invalid storage</value>
  </data>
  <data name="lastNameException" xml:space="preserve">
    <value>Not valid last name</value>
  </data>
  <data name="lastNameInputMessage" xml:space="preserve">
    <value>Last name: </value>
  </data>
  <data name="makeSnapshotLog" xml:space="preserve">
    <value>{0} - Calling MakeSnapshot()</value>
  </data>
  <data name="makeSnapshotResultLog" xml:space="preserve">
    <value>{0} - MakeSnapshot() completed</value>
  </data>
  <data name="makeSnapshotTime" xml:space="preserve">
    <value>MakeSnapshot method execution duration is {0}.</value>
  </data>
  <data name="memoryStorage" xml:space="preserve">
    <value>Using memory storage</value>
  </data>
  <data name="missingDiskDrive" xml:space="preserve">
    <value>No such disk drive</value>
  </data>
  <data name="missingJsonFile" xml:space="preserve">
    <value>Configuration file not found</value>
  </data>
  <data name="noExplanationMessage" xml:space="preserve">
    <value>There is no explanation for '{0}' command.</value>
  </data>
  <data name="noRecords" xml:space="preserve">
    <value>Storage is empty.</value>
  </data>
  <data name="noRecordsMessage" xml:space="preserve">
    <value>No records with this parameters</value>
  </data>
  <data name="pointer" xml:space="preserve">
    <value>&gt; </value>
  </data>
  <data name="purgeLog" xml:space="preserve">
    <value>{0} - Calling Purge()</value>
  </data>
  <data name="purgeResultLog" xml:space="preserve">
    <value>{0} - Purge() completed</value>
  </data>
  <data name="purgeTime" xml:space="preserve">
    <value>Purge method execution duration is {0}.</value>
  </data>
  <data name="recordCreateMessage" xml:space="preserve">
    <value>Record #{0} is created.</value>
  </data>
  <data name="recordNotExist" xml:space="preserve">
    <value>Record #{0} doesn't exists.</value>
  </data>
  <data name="recordUpdateMessage" xml:space="preserve">
    <value>Record #{0} is updated.</value>
  </data>
  <data name="removeFailedResultLog" xml:space="preserve">
    <value>{0} - Remove() failed. Record with Id = '{1}' is missing</value>
  </data>
  <data name="removeLog" xml:space="preserve">
    <value>{0} - Calling Remove() with Id = '{1}'</value>
  </data>
  <data name="removeResultLog" xml:space="preserve">
    <value>{0} - Remove() completed</value>
  </data>
  <data name="removeSuccess" xml:space="preserve">
    <value>Record #{0} is removed.</value>
  </data>
  <data name="restoreLog" xml:space="preserve">
    <value>{0} - Calling Restore()</value>
  </data>
  <data name="restoreResultLog" xml:space="preserve">
    <value>{0} - Restore() completed</value>
  </data>
  <data name="restoreTime" xml:space="preserve">
    <value>Restore method execution duration is {0}.</value>
  </data>
  <data name="sexException" xml:space="preserve">
    <value>Not valid sex</value>
  </data>
  <data name="sexInputMessage" xml:space="preserve">
    <value>Sex: </value>
  </data>
  <data name="similarCommand" xml:space="preserve">
    <value>The most similar command is</value>
  </data>
  <data name="similarCommands" xml:space="preserve">
    <value>The most similar commands are</value>
  </data>
  <data name="unknownArgument" xml:space="preserve">
    <value>Unknown argument {0}</value>
  </data>
  <data name="unsupportedSyntaxis" xml:space="preserve">
    <value>Unsupported syntaxis</value>
  </data>
  <data name="updateLog" xml:space="preserve">
    <value>{0} - Calling Update()</value>
  </data>
  <data name="updateResultLog" xml:space="preserve">
    <value>{0} - Update() completed</value>
  </data>
  <data name="updateTime" xml:space="preserve">
    <value>Update method execution duration is {0}.</value>
  </data>
  <data name="weightException" xml:space="preserve">
    <value>Not valid weight</value>
  </data>
  <data name="weightInputMessage" xml:space="preserve">
    <value>Weight: </value>
  </data>
</root>